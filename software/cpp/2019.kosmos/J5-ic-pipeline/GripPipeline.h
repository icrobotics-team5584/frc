#pragma once
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>

namespace grip {

/**
* A representation of the different types of blurs that can be used.
*
*/
enum BlurType {
	BOX, GAUSSIAN, MEDIAN, BILATERAL
};
/**
* GripPipeline class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class GripPipeline {
	private:
    cv::Mat source0;
    cv::Mat source1;
    cv::Mat source2;
    cv::Mat source3;
		bool switch0Switch;
		bool switch1Switch;
		bool switch2Switch;
		bool switch3Switch;
		cv::Mat rgbThreshold0Output;
		cv::Mat rgbThreshold1Output;
		cv::Mat hsvThreshold0Output;
		cv::Mat hsvThreshold1Output;
		cv::Mat switch0Output;
		cv::Mat switch1Output;
		cv::Mat blur0Output;
		cv::Mat blur1Output;
		std::vector<std::vector<cv::Point> > findContours0Output;
		std::vector<std::vector<cv::Point> > findContours1Output;
		std::vector<std::vector<cv::Point> > filterContours0Output;
		std::vector<std::vector<cv::Point> > filterContours1Output;
		std::vector<std::vector<cv::Point> > filterContours2Output;
		std::vector<std::vector<cv::Point> > filterContours3Output;
		std::vector<std::vector<cv::Point> > switch2Output;
		std::vector<std::vector<cv::Point> > switch3Output;
		void rgbThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void hsvThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void blur(cv::Mat &, BlurType &, double , cv::Mat &);
		void findContours(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void filterContours(std::vector<std::vector<cv::Point> > &, double , double , double , double , double , double , double [], double , double , double , double , std::vector<std::vector<cv::Point> > &);
		template<typename T>
		void pipelineswitch(bool sw, T &onTrue, T &onFalse, T &output);

	public:
		GripPipeline();
		void Process(cv::Mat& source0, cv::Mat& source1, cv::Mat& source2, cv::Mat& source3);
    void SetSource0(cv::Mat& source0);
    void SetSource1(cv::Mat& source1);
    void SetSource2(cv::Mat& source2);
    void SetSource3(cv::Mat& source3);
    
	 	void setSwitch0(bool value);
	 	void setSwitch1(bool value);
	 	void setSwitch2(bool value);
	 	void setSwitch3(bool value);
		cv::Mat* GetRgbThreshold0Output();
		cv::Mat* GetRgbThreshold1Output();
		cv::Mat* GetHsvThreshold0Output();
		cv::Mat* GetHsvThreshold1Output();
		cv::Mat* GetSwitch0Output();
		cv::Mat* GetSwitch1Output();
		cv::Mat* GetBlur0Output();
		cv::Mat* GetBlur1Output();
		std::vector<std::vector<cv::Point> >* GetFindContours0Output();
		std::vector<std::vector<cv::Point> >* GetFindContours1Output();
		std::vector<std::vector<cv::Point> >* GetFilterContours0Output();
		std::vector<std::vector<cv::Point> >* GetFilterContours1Output();
		std::vector<std::vector<cv::Point> >* GetFilterContours2Output();
		std::vector<std::vector<cv::Point> >* GetFilterContours3Output();
		std::vector<std::vector<cv::Point> >* GetSwitch2Output();
		std::vector<std::vector<cv::Point> >* GetSwitch3Output();
};


} // end namespace grip


