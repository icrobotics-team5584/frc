#pragma once
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>

namespace grip {

/**
* A representation of the different types of blurs that can be used.
*
*/
enum BlurType {
	BOX, GAUSSIAN, MEDIAN, BILATERAL
};
/**
* GripPipeline class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class GripPipeline {

	private:

		cv::Mat source0;
		cv::Mat source1;
		cv::Mat hsvThreshold0Output;
		cv::Mat hsvThreshold1Output;
		cv::Mat blur0Output;
		cv::Mat blur1Output;
		std::vector<std::vector<cv::Point> > findContours0Output;
		std::vector<std::vector<cv::Point> > findContours1Output;
		std::vector<std::vector<cv::Point> > filterContours0Output;
		std::vector<std::vector<cv::Point> > filterContours1Output;

		void hsvThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void blur(cv::Mat &, BlurType &, double , cv::Mat &);
		void findContours(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void filterContours(std::vector<std::vector<cv::Point> > &, double , double , double , double , double , double , double [], double , double , double , double , std::vector<std::vector<cv::Point> > &);

	public:

		GripPipeline();
		void Process(cv::Mat& source0, cv::Mat& source1);
		void SetSource0(cv::Mat& source0);
		void SetSource1(cv::Mat& source1);

		cv::Mat* GetHsvThreshold0Output();
		cv::Mat* GetBlur0Output();
		std::vector<std::vector<cv::Point> >* GetFindContours0Output();
		std::vector<std::vector<cv::Point> >* GetFilterContours0Output();

		cv::Mat* GetHsvThreshold1Output();
		cv::Mat* GetBlur1Output();
		std::vector<std::vector<cv::Point> >* GetFindContours1Output();
		std::vector<std::vector<cv::Point> >* GetFilterContours1Output();

};


} // end namespace grip


